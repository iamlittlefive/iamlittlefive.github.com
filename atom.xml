<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LittlO fiVE]]></title>
  <link href="http://iamlittlefive.github.io/atom.xml" rel="self"/>
  <link href="http://iamlittlefive.github.io/"/>
  <updated>2013-07-23T23:24:08+08:00</updated>
  <id>http://iamlittlefive.github.io/</id>
  <author>
    <name><![CDATA[littlefive]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[selenium python 文档（4）]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/07/22/docs4ofselenium/"/>
    <updated>2013-07-22T22:25:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/07/22/docs4ofselenium</id>
    <content type="html"><![CDATA[<h3>4.定位元素</h3>

<p>在页面中定位元素的方法很多，你可以根据自己的需要选择最适合的。Selenium提供了下面这些方法：</p>

<pre><code>find_element_by_id
find_element_by_name
find_element_by_xpath
find_element_by_link_text
find_element_by_partial_link_text
find_element_by_tag_name
find_element_by_class_name
find_element_by_css_selector
</code></pre>

<p>如果要查找多个元素怎么办？别急，还有下面的这些方法：</p>

<pre><code>find_elements_by_name
find_elements_by_xpath
find_elements_by_link_text
find_elements_by_partial_link_text
find_elements_by_tag_name
find_elements_by_class_name
find_elements_by_css_selector
</code></pre>

<p>可以看到，只是把<strong>element</strong>改成了<strong>elements</strong>而已。这些方法将会返回一个列表。</p>

<h4>4.1.通过Id定位</h4>

<p>当知道一个元素的id属性时，就可以使用这种方法来定位，该方法会返回匹配到的第一个元素的位置。如果没有任何元素有该id属性，将会抛出一个<code>NoSuchElementException</code>的异常。</p>

<p>举个栗子，页面中包含了一段这样的代码：</p>

<pre><code>&lt;html&gt;
    &lt;body&gt;
        &lt;form id="loginForm"&gt;
            &lt;input name="username" type="text" /&gt;
            &lt;input name="password" type="password" /&gt;
            &lt;input name="continue" type="submit" value="Login" /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;         
</code></pre>

<p>那可以通过这段代码来定位其中的表单：</p>

<pre><code>login_form = driver.find_elements_by_id('loginForm')
</code></pre>

<h4>4.2.通过name定位</h4>

<p>这个没啥好说的，就是把上面的id属性换成了name属性而已。</p>

<p>沿用上面的代码。可以这样定位usernme &amp; password：</p>

<pre><code>username = driver.find_element_by_name('username')
password = driver.find_element_by_name('password')
</code></pre>

<p>稍微修改下原来的html代码。</p>

<pre><code>&lt;html&gt;
    &lt;body&gt;
        &lt;form id="loginForm"&gt;
            &lt;input name="username" type="text" /&gt;
            &lt;input name="password" type="password" /&gt;
            &lt;input name="continue" type="submit" value="Login" /&gt;
            &lt;input name="continue" type="button" value="Clear" /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt; 
</code></pre>

<p>增加了一个按钮。那么下面的这段代码实际上只会返回<strong>Login</strong>按钮。</p>

<pre><code>continue = driver.find_element_by_name('continue')
</code></pre>

<p>先写这些，剩下的明天再搞。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[游记-大屿山（香港）]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/07/21/youji-dayushan-hongkong/"/>
    <updated>2013-07-21T23:51:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/07/21/youji-dayushan-hongkong</id>
    <content type="html"><![CDATA[<h4>交通</h4>

<p>我在福田口岸过关，搭港铁从<strong>落马洲</strong>到<strong>东涌</strong>，F口出站，走几步到一个巴士总站，搭23路去天坛大佛即可。</p>

<p>交通花费：$52+$17.2=$69.2</p>

<h4>风景</h4>

<p>大屿山风景没得说，非常漂亮。</p>

<p>照片传送门：<a href="http://user.qzone.qq.com/529181094#!app=4&amp;via=QZ.HashRefresh">http://user.qzone.qq.com/529181094#!app=4&amp;via=QZ.HashRefresh</a></p>

<p>深刻赶脚去香港玩，大部分时间和钱都是花在地铁上了，这一点略坑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【每天看点算法】插入排序]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/07/11/clanguageday1-insertsort/"/>
    <updated>2013-07-11T22:19:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/07/11/clanguageday1-insertsort</id>
    <content type="html"><![CDATA[<blockquote><p>本文及后续类似专题的文章均作为自己的读书笔记。算法描述摘自《算法精解：C语言描述》一书。后续不再特殊说明。</p></blockquote>

<h4>算法描述</h4>

<p>原理很简单：<strong>就是从一串无序的数列中把数据一个个的取出来，然后插入到一个有序数列中去。</strong>
打个比方，上体育课，一堆人跑出来了，体育老师一个个的叫出来，然后按身高排队，后面叫到的人自动找自己应该站的位置。</p>

<p><strong>缺点</strong>：每一个还没排序的数都需要和有序队列中的元素做比较。如果数据比较多就惨了。想像一下，操场上已经有100个人按身高拍好队了，第101个得一个个的跟这些人比，万一这一百个都比他矮那不惨了，得比完一百个。</p>

<p><strong>优点</strong>：当一个元素插入时有序队列时，只需要遍历一次就可以了。</p>

<pre><code>//记个比较简单的算法
void insertSort(int a[],int n)
{
    for(int i = 1;i &lt; n; ++i)
        for(int j = i - 1; j &gt;= 0 &amp;&amp; a[j]&lt;a[j+1]; --j)
        {
            swap(a[j],a[j+1]);
        }
}
//原文地址:http://blog.csdn.net/morewindows/article/details/6665714
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium-python 文档（3）]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/06/26/docs3-of-selenium/"/>
    <updated>2013-06-26T22:15:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/06/26/docs3-of-selenium</id>
    <content type="html"><![CDATA[<h3>3、访问网页</h3>

<p>估计你用WebDriver要做的第一件事就是打开一个链接。通常可以使用get方法。</p>

<pre><code>driver.get("http://www.google.com")
</code></pre>

<h4>3.1、和页面交互</h4>

<p>仅仅能打开页面是远远不够的，我们希望能和页面（或者特指包含html元素的页面）进行交互。首先，我们需要找到一个元素。WebDriver提供了大量的方法来查找元素。例如，当前有一个这样的元素：</p>

<pre><code>&lt;input type="text" name="passwd" id="passwd-id" /&gt;
</code></pre>

<p>那我们可以通过下面任一种方式来查找它：</p>

<pre><code>element = driver.find_element_by_id("passwd-id")
element = driver.find_element_by_name("passwd")
element = driver.find_element_by_xpath("//input[@id='passwd-id']")
</code></pre>

<p>我们也可以通过文本来找到一个节点，但是注意这段文本要精确匹配。另外在WebDriver中使用XPATH的时候要注意，如果在查询时匹配到多个元素，那只会返回第一个。如果什么都没找到，那就会引发一个<code>NoSuchElementException</code>异常。</p>

<p>如果我们已经查找到了一个元素，那可以做点什么呢？首先，我们可以往一个文本框中输入一段文字。</p>

<pre><code>element.send_keys("some text")
</code></pre>

<p>我们也可以这样模拟输入箭头：</p>

<pre><code>element.send_keys(" and some",Keys.ARROW_DOWN)
</code></pre>

<p>我们可以在所有元素上调用send_keys方法，这使得我们可以测试页面上的一些快捷键。一点要注意的地方时，输入到文本框中的东西不会自动清除。相反，你的输入会叠加在已有输入的后面。当然，可以利用clear方法清除掉这些内容。</p>

<pre><code>element.clear()
</code></pre>

<blockquote><p>注：刚测试一段代码时，输入的文本是中文，报了个编码错误。查了下，可以这样搞定，在中文前面加上个u。测试代码，注意“360大流氓”前边那个u就可以了：</p>

<pre><code># coding: utf-8    
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Firefox()
driver.get("http://www.baidu.com")
assert u"百度" in driver.title
elem = driver.find_element_by_name("wd")
elem.send_keys(u"360大流氓")
# 也可以使用elem.summit()来提交
elem.send_keys(Keys.RETURN)
print driver.title
driver.close()
</code></pre></blockquote>

<h4>3.2、填表单</h4>

<p>我们已经见过怎么往文本框中输入文本，那么其他元素呢？实际上我们还可以改变checkbox的勾选状态，就想选择标签那样把某个元素变为选中状态。要做到这样并不难。</p>

<pre><code>select = driver.find_element_by_xpath("//select")
all_options = select.find_elements_by_tag_name("option")
for option in all_options:
    print "Value is: %s" % option.get_attribute("value")
    option.click()
</code></pre>

<p>这段代码的作用是找到页面上的第一个select元素，然后循环点击下拉列表的每一个选项，并打印出对应的值。测试代码如下：</p>

<pre><code>&lt;!--这是一段测试代码，保存该文件到一个目录--&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;select&gt;
  &lt;option value ="volvo"&gt;Volvo&lt;/option&gt;
  &lt;option value ="saab"&gt;Saab&lt;/option&gt;
  &lt;option value="opel"&gt;Opel&lt;/option&gt;
  &lt;option value="audi"&gt;Audi&lt;/option&gt;
&lt;/select&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>然后运行下面的Python代码：</p>

<pre><code>from selenium import webdriver

driver = webdriver.Firefox()
driver.get("你自己要访问的url")
select = driver.find_element_by_xpath("//select")
all_options = select.find_elements_by_tag_name("option")
for option in all_options:
    print "Value is: %s" % option.get_attribute("value")
    option.click()  
driver.close()
</code></pre>

<p>继续刚刚的话题，一旦你填完了表单，接下来该想的就是提交了，一种提交的方法就是点击表单里的“summit”按钮。</p>

<pre><code>#假设提交按钮的id是submit
driver.find_element_by_id("submit").click()
</code></pre>

<p>另外，WebDriver有一种方便的提交方法，这种方法对每一种元素都有效。如果你在一个表单内对某元素调用该方法，那么WebDriver会遍历整个DOM树直到找到表单的闭合节点，然后调用submit方法。如果该元素并没有处于一个表单之中，那么就会抛出一个<code>NoSuchElementException</code>的异常。</p>

<pre><code>element.submit()
</code></pre>

<h4>3.3、拖放</h4>

<p>我们可以拖放或者移动一个元素，比如移动一段距离，拖放到另一个元素上面等。</p>

<pre><code>element = driver.find_element_by_name("source")
target = driver.find_element_by_name("target")
</code></pre>

<blockquote><p>这个没发现怎么用呢。</p></blockquote>

<h4>3.4、在窗口及框架之间移动</h4>

<p>现在的web应用基本都有很多框架（frames）。WebDriver提供了<code>switch_to_window</code>方法来支持窗口之间的移动。</p>

<pre><code>driver.switch_to_window("windowName")
</code></pre>

<p>所有对driver的调用都是指向一个特定的窗口。但是怎样能知道窗口的名字呢？可以通过查看javascript脚本或者链接来打开它。</p>

<pre><code>&lt;a href="somewhere.html" target="windowName"&gt;Click here to open a new window&lt;/a&gt;
</code></pre>

<p>另外，我们也可以把<strong>“窗口句柄”</strong>传给<code>switch_to_window</code>方法。可以通过这样的方法来打开没一个窗口：</p>

<pre><code>for handle in driver.window_handles:
    driver.switch_to_window(handle)
</code></pre>

<p>在frame之间切换可以使用：</p>

<pre><code>driver.switch_to_frame("frameName")
</code></pre>

<p>可以通过.来访问subframes（子框架？），也可以通过序号来访问指定的框架。</p>

<pre><code>driver.switch_to_frame("frameName.0.child")
</code></pre>

<p>上面这段代码将会访问当前框架（frameName指定）的名为“child”的子框架。所有的框架好像都是从最上层被计算的。</p>

<blockquote><p>这一段也找不到什么栗子来演示。</p></blockquote>

<h4>3.5、弹出框</h4>

<p>Selenium WebDriver 本身就支持处理弹出的对话框。当触发了一个弹出框的操作，你可以通过下面这段代码访问alert框。</p>

<pre><code>alert = driver.switch_to_alert()
</code></pre>

<p>alert会指向当前的alert对象，通过这个对象，那你可以执行接受、取消、读取内容或者输入一个提示。该接口对alerts、confirms、prompts等都有效。</p>

<h4>3.6、访问：历史记录及定位</h4>

<p>前面我们提过可以使用get方法访问一个页面。WebDriver有大量小型、以任务为主的接口，访问网页就是一个很有用的工作。</p>

<pre><code>driver.get("http://www.google.com")
</code></pre>

<p>可以这样向前或者向后跳转页面。</p>

<pre><code>driver.forward()
driver.back()
</code></pre>

<p>请注意这项功能完全依赖于使用的driver。如果你在一个浏览器上使用另一个浏览器上的方法，那么当你调用这些方法时可能会发生一些意料之外的事情。（这一句感觉翻译不准确，大概意思就是说在跨浏览器时可能会有问题？）</p>

<h4>3.7、Cookies</h4>

<p>为了使用cookies，我们必须要在cookie有效的域中。</p>

<pre><code># 进到正确的域中
driver.get("http://www.example.com")
# 现在设置cookie。该cookie对整个域名有效。
cookie = {"key":"value"}
driver.add_cookie(cookie)

# 现在输出所有的cookie
all_cookies = driver.get_cookies()
for cookie_name,cookie_value in all_cookies:
    print "%s -&gt; %s", cookie_name
</code></pre>

<h4>3.8、准备学习下一章</h4>

<p>复习一下，准备学习下一章</p>

<pre><code># coding: utf-8
from selenium import webdriver

driver = webdriver.Firefox()
# 访问google主页
driver.get("http://www.51buy.com")
# 找到搜索框
search_box = driver.find_element_by_name("q")
# 输入"selenium-py文档"
search_box.send_keys(u"超级笨")
# 提交
search_box.submit()
# 后退
driver.back()
# 前进
driver.forward()
# 写个cookie
test_cookie = {"QQ":10001}
driver.add_cookie(test_cookie)
# 读取cookie
all_cookies = driver.get_cookies()
# 下面这个for循环在我这里执行出错了，报 too many values to unpack貌似是访问时页面调的东西很多
for cookie_name, cookie_value in all_cookies:
    print "%s-&gt;%s", cookie_name, cookie_value

driver.close()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium-python 文档（2）]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/06/24/docs2-of-selenium/"/>
    <updated>2013-06-24T20:49:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/06/24/docs2-of-selenium</id>
    <content type="html"><![CDATA[<p>本文翻译自：<a href="http://selenium-python.readthedocs.org/en/latest/getting-started.html">http://selenium-python.readthedocs.org/en/latest/getting-started.html</a></p>

<h3>2、开始使用selenium</h3>

<h4>2.1、简单的示例</h4>

<p>安装好selenium之后，可以尝试下这段代码：</p>

<pre><code>from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Firefox()
driver.get("http://www.python.org")
assert "Python" in driver.title
elem = driver.find_element_by_name("q")
elem.send_keys("selenium")
elem.send_keys(Keys.RETURN)
assert "Google" in driver.title
driver.close()
</code></pre>

<p>保存代码，然后运行即可。</p>

<h4>2.2、简单解读</h4>

<p>首先，前两行代码导入了需要使用的模块。selenium.webdriver模块提供了所有WebDriver的实现，当前支持Firefox、Chrome、IE和Remote。类Keys提供了类似RETURN，F1，ALT等按键的键值。</p>

<pre><code>from selenium import webdriver
from selenium.webdriver.common.keys import Keys
</code></pre>

<p>接下来，创建了一个Firefox的实例。</p>

<pre><code>driver = webdriver.Firefox()
</code></pre>

<p>driver.get方法将会打开URL所代表的页面，只有等到页面完全加载之后WebDriver才会把控制权返回给你的脚本。值得注意的是，如果你的页面使用了大量的AJAX,那么WebDriver可能不知道什么时候页面完全被加载。</p>

<pre><code>driver.get("http://www.python.org")
</code></pre>

<p>下面的一行是一个断言，用来判断页面标题中是不是有“python”这个字符串。</p>

<pre><code>assert "Python" in driver.title
</code></pre>

<p>WebDriver提供了大量用于查找元素的方法，这些方法的命名都是这样的find_element_by_*。例如：使用find_element_by_name方法，可以通过查找name这个属性来定位到input text元素。关于查找元素的内容在后面会有详细的介绍。</p>

<pre><code>#这一行是用来查找name属性为q的标签
elem = driver.find_element_by_name("q")
</code></pre>

<p>接下来要模拟使用键盘输入一些值，从selenium.webdriver.common.keys总引入的类Keys能帮我们完成这件事儿。</p>

<pre><code>#elem是搜索框的句柄，现在在搜索框里输入selenium，然后按下RETURN键
elem.send_keys("selenium")
elem.send_keys(Keys.RETURN)
</code></pre>

<p>提交之后，应该转到了Google的搜索页。所以应该能在标题中搜索到字符串&#8221;Google&#8221;</p>

<pre><code>assert "Google" in driver.title
</code></pre>

<p>最后，关闭浏览器窗口。我们也可以使用quit方法。quit方法会关闭整个浏览器，而close只关闭当前的tab页，不过如果只有一个tab的话，大多数浏览器会默认整个退出。</p>

<h4>2.3、使用selenium写测试用例</h4>

<p>Selenium通常用来写测试用例，但是selenium本身并没有提供一个测试框架。我们可以使用Python的unittest模块来写测试用例，也可以使用py.test或者nose。（俺对这几部分都不熟悉。。。后面马上看）</p>

<p>本节我们来使用unittest作为框架。下面的代码是一个使用unittest模块的示例，主要用来测试python.org的搜索功能。</p>

<pre><code>import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

class PythonOrgSearch(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()

    def test_search_in_python_org(self):
        driver = self.driver
        driver.get("http://www.python.org")
        self.assertIn("Python",driver.title)
        elem = driver.find_element_by_name("q")
        elem.send_keys("selenium")
        elem.send_keys(Keys.RETURN)
        self.assertIn("Google", driver.title)

    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    unittest.main()
</code></pre>

<p>保存并运行这段代码，如果输出如下则代表运行成功：</p>

<pre><code>python test_python_org_search.py
.
----------------------------------------------------------------------
Ran 1 test in 15.566s

OK
</code></pre>

<p>如果把assertIn里面的参数改一下，比如Google改为GoogleG，那输出如下：（我只是测试一下单元测试的错误输出，你可以不用做此尝试）</p>

<pre><code>F
======================================================================
FAIL: test_search_in_python_org (__main__.PythonOrgSearch)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "E:\PythonFight\Selenium\test_python_org_search.py", line 16, in test_sea
rch_in_python_org
self.assertIn("GoogleG", driver.title)
AssertionError: 'GoogleG' not found in u'selenium site:www.python.org - Google \
u641c\u7d22'

----------------------------------------------------------------------
Ran 1 test in 19.588s

FAILED (failures=1)
</code></pre>

<h4>2.4、简单过一下上面的代码</h4>

<p>除了原来引入的两个模块，我们最新引入了unittest模块。</p>

<pre><code>import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
</code></pre>

<p>测试用例类继承自unittest.TestCase，通过该继承来告诉unittest，这是一个测试用例。</p>

<pre><code>class PythonOrgSearch(unittest.TestCase):
</code></pre>

<p>setUp是初始化模块，该方法会在所有测试方法（test function）之前调用。我们在setUp方法中创建了一个Firefox WebDriver的实例。</p>

<pre><code>def setUp(self):
    self.driver = webdriver.Firefox()
</code></pre>

<p>接下来就是我们的测试方法，该方法的第一行创建了本地引用，该本地引用指向setUp方法中创建的driver对象。</p>

<pre><code>def test_search_in_python_org(self):
    driver = self.driver
</code></pre>

<p>接下来两行的作用是打开python.org并加了一个断言：</p>

<pre><code>    driver.get("http://www.python.org")
    self.assertIn("Python",driver.title)
</code></pre>

<blockquote><p><strong>注意：assertIn方法只在Python2.7或更高的Python版本中实现。</strong></p></blockquote>

<p>test_search_in_python_org方法中的其他部分就不说了，前面都有讲。</p>

<p>tearDown方法会在所有测试方法都执行完毕后才被调用，该方法用来执行一些清理工作。在本例中，我们用来关闭WebDriver.</p>

<pre><code>def tearDown(self):
    self.driver.close()
</code></pre>

<p>最后一行，用来运行上面的代码。</p>

<pre><code>if __name__ == "__main__":
    unittest.main()
</code></pre>

<blockquote><p>原文说最后一段是“boiler plate code”，我搜索了一下，意思是指：在很多地方都需要，并且不用做什么修改的代码。感兴趣的可以看维基百科上的词条【<a href="https://en.wikipedia.org/wiki/Boilerplate_code">Boilerplate code</a>】</p></blockquote>

<h4>2.5、通过remote WebDriver使用selenium</h4>

<p>要使用remote WebDriver，必须先启动selenium server,在命令行运行如下命令：</p>

<pre><code>java -jar selenium-server-standalone-2.x.x.jar
</code></pre>

<p>启动之后，可以看到出现一条类似这样的提示：</p>

<pre><code>15:43:07.541 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub
</code></pre>

<p>这一行输出的意思是，我们可以使用这个url来连接remote WebDriver。示例如下：</p>

<pre><code>from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
driver = webdriver.Remote(
    command_executor = 'http://127.0.0.1:4444/wd/hub'，
    desired_capabilities = DesiredCapabilities.CHROME)

driver = webdriver.Remote(
    command_executor = 'http://127.0.0.1:4444/wd/hub'，
    desired_capabilities = DesiredCapabilities.OPERA)

driver = webdriver.Remote(
    command_executor = 'http://127.0.0.1:4444/wd/hub'，
    desired_capabilities = DesiredCapabilities.HTMLUNITWITHJS)
</code></pre>

<blockquote><p>泥煤，这里报一大堆错，后面还得好好检查下，这一段有些不明所以。</p>

<p>BTW,原文少导入了webdriver。所以，应该在最前面加上一行:
<code>from selenium import webdriver</code></p></blockquote>

<p>desired capabilities 是一个字典，所以除了使用默认的字典，还可以明确的指定这些值。</p>

<pre><code>driver = webdriver.Remote(
   command_executor='http://127.0.0.1:4444/wd/hub',
   desired_capabilities={'browserName': 'htmlunit',
                         'version': '2',
                         'javascriptEnabled': True})
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium-python文档（1）]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/06/22/docs-of-selenium/"/>
    <updated>2013-06-22T20:09:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/06/22/docs-of-selenium</id>
    <content type="html"><![CDATA[<p>本文翻译自：<a href="http://selenium-python.readthedocs.org/en/latest/installation.html">http://selenium-python.readthedocs.org/en/latest/installation.html</a></p>

<p>做了部分简化，也可能存在翻译不准确的地方，如果有时间的话建议参考原文。本文仅作为读书笔记。</p>

<h3>1、安装selenium-python</h3>

<h4>1.1、selenium-python介绍</h4>

<p>Selenium Python bindings（selenium的python 绑定？）提供了一个用来编写功能/验收测试的API。通过该API我们可以直接访问Selenium Webdriver的所有功能。</p>

<p>Selenium Python bindings 提供了一个方便的API来访问Firefox、IE、Chrome、Remote（是什么？）等Selenium WebDrivers。当前支持的python版本是2.6、2.7、3.2和3.3。</p>

<p>该文档仅解释了Selenium 2 WebDriver 的API。</p>

<h4>1.2、下载安装</h4>

<p>可以直接下载<a href="https://pypi.python.org/pypi/selenium" title="selenium">selenium</a>的程序包。也可以使用下面两个命令下载安装。</p>

<blockquote><p><code>easy_install selenium</code></p></blockquote>

<p>或者</p>

<blockquote><p><code>pip install selenium</code></p></blockquote>

<p>pip工具什么的，直接下载<a href="http://www.activestate.com/activepython" title="ActivePython">ActivePython</a>然后安装就可以了，什么东西都会安装好。（当然，如果你已经安装了python，那单独下载<a href="https://pypi.python.org/pypi/pip" title="pip">pip</a>工具也可以）</p>

<h4>1.3、windows下安装的详细说明</h4>

<p>1、安装<a href="http://www.python.org/download/" title="Python 2.7">python 2.7</a>。</p>

<p>2、创建一个名为C:\seltests的文件夹，然后下载<a href="http://www.virtualenv.org/en/latest/">virtualenv.py</a>脚本到这个文件夹下面。</p>

<p>如果已经下载并正确的保存了程序，请确保virtualenv.py文件在系统中的C:\seltests\virtualenv.py目录下存在。</p>

<blockquote><p>注：我觉的这个目录可以自己定义。F:\test应该也可以。</p>

<p>virtualenv.py是一个创建隔离的python环境的工具。virtualenv要解决的根本问题是库的版本和依赖。</p>

<p><strong>参考</strong>：</p>

<p>[1]<a href="http://blogs.360.cn/blog/how-360-uses-python-1-virtualenv/">http://blogs.360.cn/blog/how-360-uses-python-1-virtualenv/</a></p>

<p>[2]<a href="http://www.google.com.hk/#newwindow=1&amp;safe=strict&amp;q=virtualenv&amp;oq=virtualenv&amp;gs_l=serp.12...1402706.1402706.2.1403563.1.1.0.0.0.0.0.0..0.0...0.0.0..1c.1.17.serp.SHLt7imthmg&amp;bav=on.2,or.&amp;bvm=bv.48293060,d.aGc&amp;fp=6689d644bd27690b&amp;biw=1366&amp;bih=643">Google一下</a></p></blockquote>

<p>3、在命令行进入到C:\seltests目录，然后执行命令:</p>

<pre><code>python virtualenv.py selenv
</code></pre>

<p>该命令将会在C:\seltests目录下创建名为selenv的文件夹，该文件夹包含了一个python的虚拟环境。</p>

<p>4、使用下面的命令安装selenium</p>

<pre><code>C:\seltests\selenv\Scripts\pip.exe install selenium
</code></pre>

<blockquote><p>注意把C:\seltests替换成你实际使用的目录</p></blockquote>

<p>现在你就可以在这个python 虚拟环境下运行你的测试脚本了。命令为：</p>

<pre><code>C:\seltests\selenv\Scripts\python.exe Your Scripts
</code></pre>

<h4>1.4、下载Selenium Server</h4>

<blockquote><p>注：只有在使用远程webDriver时，才需要Selenium Server</p></blockquote>

<p>Selenium server 是一个Java 程序。需要安装Java 运行时环境（JRE）来运行Selenium server.</p>

<p>你可以在<a href="http://seleniumhq.org/download/" title="靠，这个老访问不了">这里</a>下载 Selenium server 2.x 。注意文件名应该是这种格式：<strong><em>selenium-server-standalone-2.x.x.jar</em></strong>。建议下载最新的2.x版本。</p>

<p>运行selenium server的命令为：</p>

<pre><code>java -jar selenium-server-standalone-2.x.x.jar
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Don't make me think》读书笔记]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/06/19/dont-make-me-think/"/>
    <updated>2013-06-19T23:02:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/06/19/dont-make-me-think</id>
    <content type="html"><![CDATA[<h3>第一章：别让我思考</h3>

<blockquote><p>使用显而易见的按钮、易于理解的文字、图片等，让一切都不言而喻，让用户不需要做额外的思考，因为每一个问号都会加重用户的认知负担。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用脚本自动添加文档注释]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/06/18/python-addfilecomment/"/>
    <updated>2013-06-18T23:56:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/06/18/python-addfilecomment</id>
    <content type="html"><![CDATA[<h3>思路</h3>

<p>就是在文档前面加上一些文档说明、编辑日期、修订记录什么的。具体作法是：</p>

<blockquote><p>1、对新建文件，直接在文档前面添加；</p>

<p>2、对已有文件，要在文档的最前面添加的话，可以先把文档内容读到一个临时文件中，然后添加注释，再把文档原内容写入进去；</p></blockquote>

<h3>代码</h3>

<pre><code># coding: utf-8
#==========================================
# @Author: tedsun
# @Desc: 在python文件上添加文档注释
# @FileName: AddFileComment.py
# @Date: 2013.6.13
# @ModifyHistory:
# @Remark: 一种简单的思路是，直接在文件前面
#  添加字符串。另一种是一行一行的添
#  加，可以指定添加一些内容，如名字
#==========================================

import os
import sys

# 默认格式，实际没有用到
FILE_COMMENT = """#coding: utf-8
#==========================================
# @Author: tedsun
# @Desc: 
# @FileName: 
# @Date: 
# @ModifyHistory: 
# @Remark: 
#==========================================
"""
#
# 读取文件名并添加指定格式的文档注释
# @filename: 需要添加文档注释的文件名
#
def addCommentToExistedFile(filename):
    tmpFileName = filename + '.tmp'
    tmpFile = open(tmpFileName,'w')
    tmpFile.write(open(filename,'rb').read())
    file = open(filename)
    for line in file.readlines():
        tmpFile.write(line)
    tmpFile.close()
    file.close()

    file = open(filename,'w')
    # file.write(FILE_COMMENT)
    addComment(file)
    tmpFile = open(tmpFileName)
    for line in tmpFile.readlines():
        file.write(line)
    tmpFile.close()
    file.close()
    os.remove(tmpFileName)
#
# 用来添加注释
# @file：文件句柄，打开和关闭均需要在函数外完成
#   
def addComment(file):
    file.write("#coding: utf-8\n")
    file.write("#==========================================\n")
    file.write("# @Author: tedsun\n")
    file.write("# @Desc: \n")
    file.write("# @FileName: ")
    # 获取文件名
    file.write(sys.argv[1])
    file.write("\n")
    file.write("# @Date: ")
    # 获取当前时间
    import time
    fileTime = time.strftime('%Y-%m-%d',time.localtime(time.time()))
    file.write(fileTime)
    file.write('\n')
    file.write("# @ModifyHistory: \n")
    file.write("# @Remark: \n")
    file.write("#==========================================\n")
#
# 从命令行创建新文件时，添加文件头
# @filename：传入文件名即可，从命令行获得
#
def newFile(filename,choice=0):
    # 如果不存在该文件，则直接新建
    if not os.path.exists(filename):
        file = open(filename,'w')
        if choice == 0:
            file.write(FILE_COMMENT)
        else:
            addComment(file)
        file.close()
    else:
        addCommentToExistedFile(filename)       

if __name__ == "__main__":
    filename = sys.argv[1]
    newFile(filename,1)
</code></pre>

<p>使用示例：</p>

<pre><code>E:\PythonFight&gt;AddFileComment.py littlefive.py
</code></pre>

<p>这样的话littlefive.py前面应该就自动生成了一段注释：</p>

<pre><code>#coding: utf-8
#==========================================
# @Author: tedsun
# @Desc: 
# @FileName: littlefive.py
# @Date: 2013-06-19
# @ModifyHistory: 
# @Remark: 
#==========================================
</code></pre>

<p>木有用插件，代码看起来比较挫~python初学，多多指教~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pywinauto学习]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/06/17/pywinauto/"/>
    <updated>2013-06-17T23:35:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/06/17/pywinauto</id>
    <content type="html"><![CDATA[<h3>安装pywinauto</h3>

<p>在32位系统下，安装基本没啥问题。<a href="http://sourceforge.net/projects/pywinauto/?source=dlp">下载</a>完安装（<em>python setup.py install</em>）即可。</p>

<p>在64位系统下，安装时遇到个错误。搜索了一下，找到一篇<a href="http://comments.gmane.org/gmane.comp.python.pywinauto.user/207">文章</a>，邮件的大意是：pywinauto的作者没有在x64下搞过，这个报错的assert只是关于大小（或者长度），并且这个assert是写死的，就是给32位写的（作者本人当时可能就是用的32位系统）。并建议注释掉报错的assert语句再尝试。OK，尝试这种作法，安装成功。猜想另一种办法，安装32位的python应该也能OK吧，但是我没尝试，如果有人尝试的话，可以告诉我一下。</p>

<h3>使用pywinauto</h3>

<p>我也在研究，没啥可写的，先贴个资料吧。
[1].<a href="http://nullege.com/codes/search/pywinauto.findwindows">http://nullege.com/codes/search/pywinauto.findwindows</a>
[2].<a href="https://code.google.com/p/pywinauto/">https://code.google.com/p/pywinauto/</a></p>

<p>后续补充其他内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建博客时遇到的一些问题]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/05/27/the-problem-when-build-the-blog/"/>
    <updated>2013-05-27T22:29:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/05/27/the-problem-when-build-the-blog</id>
    <content type="html"><![CDATA[<h2>如何用build搭建博客</h2>

<p>Google一下<strong>“Github + octopress”</strong>能搜出好多文章来。我也是根据各位大虾的经验一步一步来的。这里就不再赘述了。</p>

<h2>我遇到的一些问题</h2>

<p><strong>问题1</strong>：bundle install时，总是有依赖文件安装不成功。我遇到两次，一次是fast-stemmer,这个把rubygems.org替换成ruby.taobao.org之后就OK了；另外一次是rdiscount 2.0.7.3安装不成功，后来把gemfile里面的2.0.7改成1.6.8就OK了，但是这样在使用的时候又遇到了其他问题，解决办法是，到github上把rdiscount 2.0.7.3单独下载下来，解压其中的文件，替换1.6.8里面的。哦，这些依赖文件都放在“YourRubyPath\lib\ruby\gems\1.9.1\gems”里。</p>

<p><strong>问题2</strong>：发布文章时，也就是rake deploy时，总是提示permission denied(public key)。github对这个问题有<a href="https://help.github.com/articles/error-permission-denied-publickey">解答</a> 。 可能需要把public key和private key都添加过去才能搞定，我这边是这样的。</p>

<blockquote><p><strong>生成public key:</strong> ssh-keygen -t rsa</p>

<p><strong>生成private key:</strong>ssh-keygen -t dsa</p></blockquote>

<p><strong>问题3</strong>：发布文章时遇到的另外一个问题是包含中文时，提示神马编码错误(好像是<strong><em>invalid byte sequence in GBK</em></strong>)，在v2ex上找到一个<a href="http://www.v2ex.com/t/26027">解决办法</a>：把报错文件中的self.content = File.read(File.join(base, name)）改成self.content = File.read(File.join(base, name), :encoding => &ldquo;utf-8&rdquo;)</p>

<p>OK，记得的差不多就这么多，还在折腾中。。。Fighting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog in Github]]></title>
    <link href="http://iamlittlefive.github.io/blog/2013/05/25/my-first-blog-in-github/"/>
    <updated>2013-05-25T22:28:00+08:00</updated>
    <id>http://iamlittlefive.github.io/blog/2013/05/25/my-first-blog-in-github</id>
    <content type="html"><![CDATA[<h2>欢迎来到Little Five的博客</h2>

<p><strong>Littlefive</strong>是高中时某童鞋给取得外号，和自己名字比较接近，就一直保留使用。</p>

<p><strong>LittleFive</strong>对python、windows编程比较感兴趣，以后会经常在这里发表一些学习经验，希望朋友们多多指教。</p>

<hr />

<p>我的年轻没有失败</p>
]]></content>
  </entry>
  
</feed>
